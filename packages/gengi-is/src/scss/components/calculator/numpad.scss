
numpad {
  user-select: none;
  display: block;
  margin: 0 auto;
  padding: 0 0;
  width: 100%;
  min-width: $page-min-width;
  max-width: $page-max-width;

  text-align: center;
  font-size: 0;

  num {
    cursor: pointer;
    position: relative;

    display: inline-block;
    margin: 0 $spacing 0;
    $third: percentage(1/3);
    width: calc(#{$third} - #{$spacing*2});
    height: calc(25vh - #{(($spacing/2)*4 + $big-block-small*3) / 4});

    @include respond-to('height', 480px) {
      height: calc(25vh - #{($spacing*4 + $big-block-small*3) / 4});
    }

    @include respond-to(xxsmall) {
      margin: 0 $spacing 0;
      height: calc(25vh - #{($spacing*4 + $big-block*3) / 4});
    }

    @include respond-to(small) {
      margin: 0 $spacing $spacing;
      height: calc(25vh - #{$spacing + ($spacing*4 + $big-block*3) / 4});
      max-height: $block;
    }

    html[gengi-safari-standalone='false'] & {
      $ios-safari-navbar: 80px;
      height: calc(25vh - #{($spacing*4 + $big-block-small*3 + $ios-safari-navbar) / 4});

      @include respond-to(xxsmall) {
        height: calc(25vh - #{($spacing*4 + $big-block*3 + $ios-safari-navbar) / 4});
      }

      @include respond-to(small) {
        height: calc(25vh - #{$spacing + ($spacing*4 + $big-block*3 + $ios-safari-navbar) / 4});
      }
    }

    opacity: 1;

    transform: translate3d(0,0,0);
    transform-origin: center center;

    transition: transform $trans-dur-slower, opacity $trans-dur-slower;

    html[gengi-state='leaving'] &,
    html[gengi-state='loading'] &,
    html[gengi-state='initial-loading'] & {
      opacity: 0;
      transform: translate3d(0,0%,0);
      transition: transform $trans-dur-slower, opacity $trans-dur-slower;
      transition-delay: 0ms;
    }

    $delay: 50ms;
    $step: 25ms;
    @for $i from 1 through 9 {
      &[key='#{$i}'] {
        $delay: $delay + $step;
        transition-delay: $delay;
      }
    }

    &[key='0'] {
      $delay: $delay + $step;
      transition-delay: $delay;
    }

    &[key=','] {
      $delay: $delay + $step;
      transition-delay: $delay;
    }

    &[key='del'] {
      $delay: $delay + $step;
      transition-delay: $delay;
    }

    &:before {
      content: attr(key);
      display: block;

      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      z-index: 1;

      margin: auto;
      width: 36px;
      height: 36px;
      line-height: 36px;

      font-size: 36px;
      font-weight: 700;
      color: $color-gray;
    }

    &[key=','] {
      cursor: default;
      opacity: 0.2;

      &:before {
        line-height: 14px;
      }
    }

    &[key='del'] {
      cursor: default;
      opacity: 0.2;

      &:before {
        display: none;
      }

      svg {
        pointer-events: none;
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        z-index: 2;

        margin: auto;

        path {
          fill: $color-gray;
        }
      }
    }

    &.available {
      cursor: pointer;
      opacity: 1;
      transition-delay: 0ms;
    }


    &:after {
      content: '';
      display: block;

      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      z-index: 0;

      margin: auto;
      width: 50px;
      height: 50px;

      background: white;
      border-radius: 100%;

      opacity: 1;
      transform: scale(0);
      transition: transform $trans-dur, opacity $trans-dur*2 ease $trans-dur/2;
    }

    @include respond-to(xxsmall) {
      &:after {
        width: 60px;
        height: 60px;
      }
    }

    &.reset:after {
      opacity: 1;
      transform: scale(0);
      transition: none;
    }

    &.press:after {
      opacity: 0;
      transform: scale(1);
    }
  }
}
